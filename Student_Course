import java.util.*;

class Course {
    String code;
    String title;
    String description;
    int capacity;
    String schedule;

    public Course(String code, String title, String description, int capacity, String schedule) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
    }
}

class Student {
    int studentID;
    String name;
    List<String> registeredCourses;

    public Student(int studentID, String name) {
        this.studentID = studentID;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }
}

public class Student_Course {
    static List<Course> courses = new ArrayList<>();
    static List<Student> students = new ArrayList<>();

    public static void main(String[] args) {
        // Sample courses
        courses.add(new Course("CS101", 
        "Introduction to Programming", 
        "Basic programming concepts", 
        30, 
        "MWF 10:00 AM"));
        courses.add(new Course("CS201", 
        "Core Java", 
        "Java programming concepts", 
        25, 
        "TTh 1:30 PM"));

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n1. Course Listing");
            System.out.println("2. Student Registration");
            System.out.println("3. Course Removal");
            System.out.println("4. Exit");
            System.out.print("Select an option: ");
            
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    displayCourseListing();
                    break;
                case 2:
                    performStudentRegistration();
                    break;
                case 3:
                    performCourseRemoval();
                    break;
                case 4:
                    System.out.println("Exiting program. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }

    private static void displayCourseListing() {
        System.out.println("\nCourse Listing:");
        for (Course course : courses) {
            System.out.println("Code: " + course.code + ", Title: " + course.title +
                    ", Capacity: " + course.capacity + ", Schedule: " + course.schedule +
                    ", Available Slots: " + (course.capacity - studentsRegisteredForCourse(course.code)));
        }
    }

    private static void performStudentRegistration() {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter student ID: ");
        int studentID = scanner.nextInt();
        System.out.print("Enter student name: ");
        String studentName = scanner.next();

        Student student = new Student(studentID, studentName);

        System.out.println("\nAvailable Courses:");
        displayCourseListing();

        System.out.print("Enter the course code to register: ");
        String courseCode = scanner.next();

        if (isCourseAvailable(courseCode) && !isStudentAlreadyRegistered(studentID, courseCode)) {
            Course course = getCourseByCode(courseCode);
            if (course.capacity > studentsRegisteredForCourse(courseCode)) {
                student.registeredCourses.add(courseCode);
                System.out.println("Registration successful!");
            } else {
                System.out.println("Course is full. Registration failed.");
            }
        } else {
            System.out.println("Invalid course or student is already registered for the course.");
        }

        students.add(student);
    }

    private static void performCourseRemoval() {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter student ID: ");
        int studentID = scanner.nextInt();

        Student student = getStudentByID(studentID);

        if (student != null && !student.registeredCourses.isEmpty()) {
            System.out.println("\nRegistered Courses:");
            for (String courseCode : student.registeredCourses) {
                System.out.println("Course Code: " + courseCode);
            }

            System.out.print("Enter the course code to remove: ");
            String courseCode = scanner.next();

            if (student.registeredCourses.contains(courseCode)) {
                student.registeredCourses.remove(courseCode);
                System.out.println("Course removal successful!");
            } else {
                System.out.println("Invalid course code. Removal failed.");
            }
        } else {
            System.out.println("Student not found or not registered for any courses.");
        }
    }

    private static int studentsRegisteredForCourse(String courseCode) {
        int count = 0;
        for (Student student : students) {
            if (student.registeredCourses.contains(courseCode)) {
                count++;
            }
        }
        return count;
    }

    private static boolean isCourseAvailable(String courseCode) {
        for (Course course : courses) {
            if (course.code.equals(courseCode)) {
                return true;
            }
        }
        return false;
    }

    private static boolean isStudentAlreadyRegistered(int studentID, String courseCode) {
        Student student = getStudentByID(studentID);
        return student != null && student.registeredCourses.contains(courseCode);
    }

    private static Course getCourseByCode(String courseCode) {
        for (Course course : courses) {
            if (course.code.equals(courseCode)) {
                return course;
            }
        }
        return null;
    }

    private static Student getStudentByID(int studentID) {
        for (Student student : students) {
            if (student.studentID == studentID) {
                return student;
            }
        }
        return null;
    }
}
